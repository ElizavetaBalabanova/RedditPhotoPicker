// Generated by Dagger (https://dagger.dev).
package com.balabanova.humblr.ui.user;

import com.balabanova.humblr.domain.repository.ProfileRemoteRepository;
import com.balabanova.humblr.domain.repository.SubredditsRemoteRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UserViewModel_Factory implements Factory<UserViewModel> {
  private final Provider<ProfileRemoteRepository> repositoryProfileProvider;

  private final Provider<SubredditsRemoteRepository> repositorySubredditsProvider;

  public UserViewModel_Factory(Provider<ProfileRemoteRepository> repositoryProfileProvider,
      Provider<SubredditsRemoteRepository> repositorySubredditsProvider) {
    this.repositoryProfileProvider = repositoryProfileProvider;
    this.repositorySubredditsProvider = repositorySubredditsProvider;
  }

  @Override
  public UserViewModel get() {
    return newInstance(repositoryProfileProvider.get(), repositorySubredditsProvider.get());
  }

  public static UserViewModel_Factory create(
      Provider<ProfileRemoteRepository> repositoryProfileProvider,
      Provider<SubredditsRemoteRepository> repositorySubredditsProvider) {
    return new UserViewModel_Factory(repositoryProfileProvider, repositorySubredditsProvider);
  }

  public static UserViewModel newInstance(ProfileRemoteRepository repositoryProfile,
      SubredditsRemoteRepository repositorySubreddits) {
    return new UserViewModel(repositoryProfile, repositorySubreddits);
  }
}
