// Generated by Dagger (https://dagger.dev).
package com.balabanova.humblr.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata({
    "com.balabanova.humblr.data.api.interceptor.LoggingInterceptorQualifier",
    "com.balabanova.humblr.data.api.interceptor.AuthTokenInterceptorQualifier"
})
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ApiModule_ProvideRedditClientFactory implements Factory<OkHttpClient> {
  private final ApiModule module;

  private final Provider<Interceptor> loggingInterceptorProvider;

  private final Provider<Interceptor> authTokenInterceptorProvider;

  public ApiModule_ProvideRedditClientFactory(ApiModule module,
      Provider<Interceptor> loggingInterceptorProvider,
      Provider<Interceptor> authTokenInterceptorProvider) {
    this.module = module;
    this.loggingInterceptorProvider = loggingInterceptorProvider;
    this.authTokenInterceptorProvider = authTokenInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideRedditClient(module, loggingInterceptorProvider.get(), authTokenInterceptorProvider.get());
  }

  public static ApiModule_ProvideRedditClientFactory create(ApiModule module,
      Provider<Interceptor> loggingInterceptorProvider,
      Provider<Interceptor> authTokenInterceptorProvider) {
    return new ApiModule_ProvideRedditClientFactory(module, loggingInterceptorProvider, authTokenInterceptorProvider);
  }

  public static OkHttpClient provideRedditClient(ApiModule instance, Interceptor loggingInterceptor,
      Interceptor authTokenInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideRedditClient(loggingInterceptor, authTokenInterceptor));
  }
}
