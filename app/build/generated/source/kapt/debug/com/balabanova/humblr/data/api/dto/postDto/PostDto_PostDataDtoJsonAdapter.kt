// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.balabanova.humblr.`data`.api.dto.postDto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class PostDto_PostDataDtoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<PostDto.PostDataDto>() {
  private val options: JsonReader.Options = JsonReader.Options.of("subreddit", "selftext",
      "author_fullname", "saved", "title", "subreddit_name_prefixed", "name", "score", "thumbnail",
      "post_hint", "created", "url_overridden_by_dest", "subreddit_id", "id", "author",
      "num_comments", "permalink", "url", "media", "is_video", "likes")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "subreddit")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "selftext")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "saved")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "score")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "created")

  private val nullableMediaAdapter: JsonAdapter<Media?> = moshi.adapter(Media::class.java,
      emptySet(), "media")

  private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
      moshi.adapter(Boolean::class.javaObjectType, emptySet(), "likes")

  public override fun toString(): String = buildString(41) {
      append("GeneratedJsonAdapter(").append("PostDto.PostDataDto").append(')') }

  public override fun fromJson(reader: JsonReader): PostDto.PostDataDto {
    var subreddit: String? = null
    var selftext: String? = null
    var author_fullname: String? = null
    var saved: Boolean? = null
    var title: String? = null
    var subreddit_name_prefixed: String? = null
    var name: String? = null
    var score: Int? = null
    var thumbnail: String? = null
    var post_hint: String? = null
    var created: Double? = null
    var url_overridden_by_dest: String? = null
    var subreddit_id: String? = null
    var id: String? = null
    var author: String? = null
    var num_comments: Int? = null
    var permalink: String? = null
    var url: String? = null
    var media: Media? = null
    var is_video: Boolean? = null
    var likes: Boolean? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> subreddit = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("subreddit",
            "subreddit", reader)
        1 -> selftext = nullableStringAdapter.fromJson(reader)
        2 -> author_fullname = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("author_fullname", "author_fullname", reader)
        3 -> saved = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("saved", "saved",
            reader)
        4 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        5 -> subreddit_name_prefixed = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("subreddit_name_prefixed", "subreddit_name_prefixed", reader)
        6 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        7 -> score = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("score", "score",
            reader)
        8 -> thumbnail = nullableStringAdapter.fromJson(reader)
        9 -> post_hint = nullableStringAdapter.fromJson(reader)
        10 -> created = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("created",
            "created", reader)
        11 -> url_overridden_by_dest = nullableStringAdapter.fromJson(reader)
        12 -> subreddit_id = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("subreddit_id", "subreddit_id", reader)
        13 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        14 -> author = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("author",
            "author", reader)
        15 -> num_comments = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("num_comments", "num_comments", reader)
        16 -> permalink = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("permalink",
            "permalink", reader)
        17 -> url = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("url", "url",
            reader)
        18 -> media = nullableMediaAdapter.fromJson(reader)
        19 -> is_video = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("is_video",
            "is_video", reader)
        20 -> likes = nullableBooleanAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return PostDto.PostDataDto(
        subreddit = subreddit ?: throw Util.missingProperty("subreddit", "subreddit", reader),
        selftext = selftext,
        author_fullname = author_fullname ?: throw Util.missingProperty("author_fullname",
            "author_fullname", reader),
        saved = saved ?: throw Util.missingProperty("saved", "saved", reader),
        title = title ?: throw Util.missingProperty("title", "title", reader),
        subreddit_name_prefixed = subreddit_name_prefixed ?:
            throw Util.missingProperty("subreddit_name_prefixed", "subreddit_name_prefixed",
            reader),
        name = name ?: throw Util.missingProperty("name", "name", reader),
        score = score ?: throw Util.missingProperty("score", "score", reader),
        thumbnail = thumbnail,
        post_hint = post_hint,
        created = created ?: throw Util.missingProperty("created", "created", reader),
        url_overridden_by_dest = url_overridden_by_dest,
        subreddit_id = subreddit_id ?: throw Util.missingProperty("subreddit_id", "subreddit_id",
            reader),
        id = id ?: throw Util.missingProperty("id", "id", reader),
        author = author ?: throw Util.missingProperty("author", "author", reader),
        num_comments = num_comments ?: throw Util.missingProperty("num_comments", "num_comments",
            reader),
        permalink = permalink ?: throw Util.missingProperty("permalink", "permalink", reader),
        url = url ?: throw Util.missingProperty("url", "url", reader),
        media = media,
        is_video = is_video ?: throw Util.missingProperty("is_video", "is_video", reader),
        likes = likes
    )
  }

  public override fun toJson(writer: JsonWriter, value_: PostDto.PostDataDto?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("subreddit")
    stringAdapter.toJson(writer, value_.subreddit)
    writer.name("selftext")
    nullableStringAdapter.toJson(writer, value_.selftext)
    writer.name("author_fullname")
    stringAdapter.toJson(writer, value_.author_fullname)
    writer.name("saved")
    booleanAdapter.toJson(writer, value_.saved)
    writer.name("title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("subreddit_name_prefixed")
    stringAdapter.toJson(writer, value_.subreddit_name_prefixed)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("score")
    intAdapter.toJson(writer, value_.score)
    writer.name("thumbnail")
    nullableStringAdapter.toJson(writer, value_.thumbnail)
    writer.name("post_hint")
    nullableStringAdapter.toJson(writer, value_.post_hint)
    writer.name("created")
    doubleAdapter.toJson(writer, value_.created)
    writer.name("url_overridden_by_dest")
    nullableStringAdapter.toJson(writer, value_.url_overridden_by_dest)
    writer.name("subreddit_id")
    stringAdapter.toJson(writer, value_.subreddit_id)
    writer.name("id")
    stringAdapter.toJson(writer, value_.id)
    writer.name("author")
    stringAdapter.toJson(writer, value_.author)
    writer.name("num_comments")
    intAdapter.toJson(writer, value_.num_comments)
    writer.name("permalink")
    stringAdapter.toJson(writer, value_.permalink)
    writer.name("url")
    stringAdapter.toJson(writer, value_.url)
    writer.name("media")
    nullableMediaAdapter.toJson(writer, value_.media)
    writer.name("is_video")
    booleanAdapter.toJson(writer, value_.is_video)
    writer.name("likes")
    nullableBooleanAdapter.toJson(writer, value_.likes)
    writer.endObject()
  }
}
