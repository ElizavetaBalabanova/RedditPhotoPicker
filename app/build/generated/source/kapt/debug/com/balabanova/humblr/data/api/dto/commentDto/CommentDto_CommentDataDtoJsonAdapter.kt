// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.balabanova.humblr.`data`.api.dto.commentDto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class CommentDto_CommentDataDtoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<CommentDto.CommentDataDto>() {
  private val options: JsonReader.Options = JsonReader.Options.of("subreddit_id", "likes", "saved",
      "id", "author", "parent_id", "score", "author_fullname", "body", "name", "permalink",
      "created", "link_id", "subreddit_name_prefixed", "depth", "count", "children")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "subredditId")

  private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
      moshi.adapter(Boolean::class.javaObjectType, emptySet(), "likes")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "id")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "score")

  private val nullableDoubleAdapter: JsonAdapter<Double?> =
      moshi.adapter(Double::class.javaObjectType, emptySet(), "created")

  private val nullableListOfStringAdapter: JsonAdapter<List<String>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "children")

  public override fun toString(): String = buildString(47) {
      append("GeneratedJsonAdapter(").append("CommentDto.CommentDataDto").append(')') }

  public override fun fromJson(reader: JsonReader): CommentDto.CommentDataDto {
    var subredditId: String? = null
    var likes: Boolean? = null
    var saved: Boolean? = null
    var id: String? = null
    var author: String? = null
    var parentId: String? = null
    var score: Int? = null
    var authorFullname: String? = null
    var body: String? = null
    var name: String? = null
    var permalink: String? = null
    var created: Double? = null
    var linkId: String? = null
    var subredditNamePrefixed: String? = null
    var depth: Int? = null
    var count: Int? = null
    var children: List<String>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> subredditId = nullableStringAdapter.fromJson(reader)
        1 -> likes = nullableBooleanAdapter.fromJson(reader)
        2 -> saved = nullableBooleanAdapter.fromJson(reader)
        3 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        4 -> author = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("author",
            "author", reader)
        5 -> parentId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("parentId",
            "parent_id", reader)
        6 -> score = nullableIntAdapter.fromJson(reader)
        7 -> authorFullname = nullableStringAdapter.fromJson(reader)
        8 -> body = nullableStringAdapter.fromJson(reader)
        9 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        10 -> permalink = nullableStringAdapter.fromJson(reader)
        11 -> created = nullableDoubleAdapter.fromJson(reader)
        12 -> linkId = nullableStringAdapter.fromJson(reader)
        13 -> subredditNamePrefixed = nullableStringAdapter.fromJson(reader)
        14 -> depth = nullableIntAdapter.fromJson(reader)
        15 -> count = nullableIntAdapter.fromJson(reader)
        16 -> children = nullableListOfStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return CommentDto.CommentDataDto(
        subredditId = subredditId,
        likes = likes,
        saved = saved,
        id = id ?: throw Util.missingProperty("id", "id", reader),
        author = author ?: throw Util.missingProperty("author", "author", reader),
        parentId = parentId ?: throw Util.missingProperty("parentId", "parent_id", reader),
        score = score,
        authorFullname = authorFullname,
        body = body,
        name = name ?: throw Util.missingProperty("name", "name", reader),
        permalink = permalink,
        created = created,
        linkId = linkId,
        subredditNamePrefixed = subredditNamePrefixed,
        depth = depth,
        count = count,
        children = children
    )
  }

  public override fun toJson(writer: JsonWriter, value_: CommentDto.CommentDataDto?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("subreddit_id")
    nullableStringAdapter.toJson(writer, value_.subredditId)
    writer.name("likes")
    nullableBooleanAdapter.toJson(writer, value_.likes)
    writer.name("saved")
    nullableBooleanAdapter.toJson(writer, value_.saved)
    writer.name("id")
    stringAdapter.toJson(writer, value_.id)
    writer.name("author")
    stringAdapter.toJson(writer, value_.author)
    writer.name("parent_id")
    stringAdapter.toJson(writer, value_.parentId)
    writer.name("score")
    nullableIntAdapter.toJson(writer, value_.score)
    writer.name("author_fullname")
    nullableStringAdapter.toJson(writer, value_.authorFullname)
    writer.name("body")
    nullableStringAdapter.toJson(writer, value_.body)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("permalink")
    nullableStringAdapter.toJson(writer, value_.permalink)
    writer.name("created")
    nullableDoubleAdapter.toJson(writer, value_.created)
    writer.name("link_id")
    nullableStringAdapter.toJson(writer, value_.linkId)
    writer.name("subreddit_name_prefixed")
    nullableStringAdapter.toJson(writer, value_.subredditNamePrefixed)
    writer.name("depth")
    nullableIntAdapter.toJson(writer, value_.depth)
    writer.name("count")
    nullableIntAdapter.toJson(writer, value_.count)
    writer.name("children")
    nullableListOfStringAdapter.toJson(writer, value_.children)
    writer.endObject()
  }
}
