// Generated by Dagger (https://dagger.dev).
package com.balabanova.humblr.data.repository;

import com.balabanova.humblr.domain.repository.SubredditsRemoteRepository;
import com.balabanova.humblr.domain.tools.ListTypes;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class PagingSource_Factory implements Factory<PagingSource> {
  private final Provider<SubredditsRemoteRepository> repositoryProvider;

  private final Provider<String> sourceProvider;

  private final Provider<ListTypes> listTypeProvider;

  public PagingSource_Factory(Provider<SubredditsRemoteRepository> repositoryProvider,
      Provider<String> sourceProvider, Provider<ListTypes> listTypeProvider) {
    this.repositoryProvider = repositoryProvider;
    this.sourceProvider = sourceProvider;
    this.listTypeProvider = listTypeProvider;
  }

  @Override
  public PagingSource get() {
    return newInstance(repositoryProvider.get(), sourceProvider.get(), listTypeProvider.get());
  }

  public static PagingSource_Factory create(Provider<SubredditsRemoteRepository> repositoryProvider,
      Provider<String> sourceProvider, Provider<ListTypes> listTypeProvider) {
    return new PagingSource_Factory(repositoryProvider, sourceProvider, listTypeProvider);
  }

  public static PagingSource newInstance(SubredditsRemoteRepository repository, String source,
      ListTypes listType) {
    return new PagingSource(repository, source, listType);
  }
}
