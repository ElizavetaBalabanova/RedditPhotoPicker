// Generated by Dagger (https://dagger.dev).
package com.balabanova.humblr.di;

import com.squareup.moshi.Moshi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ApiModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final ApiModule module;

  private final Provider<OkHttpClient> okhttpClientProvider;

  private final Provider<Moshi> moshiProvider;

  public ApiModule_ProvideRetrofitFactory(ApiModule module,
      Provider<OkHttpClient> okhttpClientProvider, Provider<Moshi> moshiProvider) {
    this.module = module;
    this.okhttpClientProvider = okhttpClientProvider;
    this.moshiProvider = moshiProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(module, okhttpClientProvider.get(), moshiProvider.get());
  }

  public static ApiModule_ProvideRetrofitFactory create(ApiModule module,
      Provider<OkHttpClient> okhttpClientProvider, Provider<Moshi> moshiProvider) {
    return new ApiModule_ProvideRetrofitFactory(module, okhttpClientProvider, moshiProvider);
  }

  public static Retrofit provideRetrofit(ApiModule instance, OkHttpClient okhttpClient,
      Moshi moshi) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofit(okhttpClient, moshi));
  }
}
