// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.balabanova.humblr.`data`.api.dto.postDto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class Media_RedditVideoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Media.RedditVideo>() {
  private val options: JsonReader.Options = JsonReader.Options.of("bitrate_kbps", "fallback_url",
      "height", "width", "scrubber_media_url", "dash_url", "duration", "hls_url", "is_gif",
      "transcoding_status")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "bitrate_kbps")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "fallback_url")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "is_gif")

  public override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("Media.RedditVideo").append(')') }

  public override fun fromJson(reader: JsonReader): Media.RedditVideo {
    var bitrate_kbps: Int? = null
    var fallback_url: String? = null
    var height: Int? = null
    var width: Int? = null
    var scrubber_media_url: String? = null
    var dash_url: String? = null
    var duration: Int? = null
    var hls_url: String? = null
    var is_gif: Boolean? = null
    var transcoding_status: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> bitrate_kbps = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("bitrate_kbps",
            "bitrate_kbps", reader)
        1 -> fallback_url = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("fallback_url", "fallback_url", reader)
        2 -> height = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("height", "height",
            reader)
        3 -> width = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("width", "width",
            reader)
        4 -> scrubber_media_url = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("scrubber_media_url", "scrubber_media_url", reader)
        5 -> dash_url = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("dash_url",
            "dash_url", reader)
        6 -> duration = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("duration",
            "duration", reader)
        7 -> hls_url = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("hls_url",
            "hls_url", reader)
        8 -> is_gif = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("is_gif",
            "is_gif", reader)
        9 -> transcoding_status = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("transcoding_status", "transcoding_status", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Media.RedditVideo(
        bitrate_kbps = bitrate_kbps ?: throw Util.missingProperty("bitrate_kbps", "bitrate_kbps",
            reader),
        fallback_url = fallback_url ?: throw Util.missingProperty("fallback_url", "fallback_url",
            reader),
        height = height ?: throw Util.missingProperty("height", "height", reader),
        width = width ?: throw Util.missingProperty("width", "width", reader),
        scrubber_media_url = scrubber_media_url ?: throw Util.missingProperty("scrubber_media_url",
            "scrubber_media_url", reader),
        dash_url = dash_url ?: throw Util.missingProperty("dash_url", "dash_url", reader),
        duration = duration ?: throw Util.missingProperty("duration", "duration", reader),
        hls_url = hls_url ?: throw Util.missingProperty("hls_url", "hls_url", reader),
        is_gif = is_gif ?: throw Util.missingProperty("is_gif", "is_gif", reader),
        transcoding_status = transcoding_status ?: throw Util.missingProperty("transcoding_status",
            "transcoding_status", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Media.RedditVideo?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("bitrate_kbps")
    intAdapter.toJson(writer, value_.bitrate_kbps)
    writer.name("fallback_url")
    stringAdapter.toJson(writer, value_.fallback_url)
    writer.name("height")
    intAdapter.toJson(writer, value_.height)
    writer.name("width")
    intAdapter.toJson(writer, value_.width)
    writer.name("scrubber_media_url")
    stringAdapter.toJson(writer, value_.scrubber_media_url)
    writer.name("dash_url")
    stringAdapter.toJson(writer, value_.dash_url)
    writer.name("duration")
    intAdapter.toJson(writer, value_.duration)
    writer.name("hls_url")
    stringAdapter.toJson(writer, value_.hls_url)
    writer.name("is_gif")
    booleanAdapter.toJson(writer, value_.is_gif)
    writer.name("transcoding_status")
    stringAdapter.toJson(writer, value_.transcoding_status)
    writer.endObject()
  }
}
