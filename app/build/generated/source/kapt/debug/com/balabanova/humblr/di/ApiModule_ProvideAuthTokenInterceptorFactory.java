// Generated by Dagger (https://dagger.dev).
package com.balabanova.humblr.di;

import com.balabanova.humblr.data.api.interceptor.AuthTokenProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.Interceptor;

@ScopeMetadata
@QualifierMetadata("com.balabanova.humblr.data.api.interceptor.AuthTokenInterceptorQualifier")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ApiModule_ProvideAuthTokenInterceptorFactory implements Factory<Interceptor> {
  private final ApiModule module;

  private final Provider<AuthTokenProvider> tokenProvider;

  public ApiModule_ProvideAuthTokenInterceptorFactory(ApiModule module,
      Provider<AuthTokenProvider> tokenProvider) {
    this.module = module;
    this.tokenProvider = tokenProvider;
  }

  @Override
  public Interceptor get() {
    return provideAuthTokenInterceptor(module, tokenProvider.get());
  }

  public static ApiModule_ProvideAuthTokenInterceptorFactory create(ApiModule module,
      Provider<AuthTokenProvider> tokenProvider) {
    return new ApiModule_ProvideAuthTokenInterceptorFactory(module, tokenProvider);
  }

  public static Interceptor provideAuthTokenInterceptor(ApiModule instance,
      AuthTokenProvider tokenProvider) {
    return Preconditions.checkNotNullFromProvides(instance.provideAuthTokenInterceptor(tokenProvider));
  }
}
