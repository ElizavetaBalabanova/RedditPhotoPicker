// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.balabanova.humblr.`data`.api.dto.profileDto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ClickedUserProfileDtoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<ClickedUserProfileDto>() {
  private val options: JsonReader.Options = JsonReader.Options.of("data", "kind")

  private val profileDtoAdapter: JsonAdapter<ProfileDto> = moshi.adapter(ProfileDto::class.java,
      emptySet(), "data")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "kind")

  public override fun toString(): String = buildString(43) {
      append("GeneratedJsonAdapter(").append("ClickedUserProfileDto").append(')') }

  public override fun fromJson(reader: JsonReader): ClickedUserProfileDto {
    var data_: ProfileDto? = null
    var kind: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> data_ = profileDtoAdapter.fromJson(reader) ?: throw Util.unexpectedNull("data_",
            "data", reader)
        1 -> kind = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("kind", "kind",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ClickedUserProfileDto(
        `data` = data_ ?: throw Util.missingProperty("data_", "data", reader),
        kind = kind ?: throw Util.missingProperty("kind", "kind", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: ClickedUserProfileDto?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("data")
    profileDtoAdapter.toJson(writer, value_.`data`)
    writer.name("kind")
    stringAdapter.toJson(writer, value_.kind)
    writer.endObject()
  }
}
