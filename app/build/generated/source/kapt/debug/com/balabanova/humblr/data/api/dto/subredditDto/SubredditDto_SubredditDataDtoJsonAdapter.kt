// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.balabanova.humblr.`data`.api.dto.subredditDto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class SubredditDto_SubredditDataDtoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<SubredditDto.SubredditDataDto>() {
  private val options: JsonReader.Options = JsonReader.Options.of("display_name", "header_img",
      "title", "icon_img", "display_name_prefixed", "subscribers", "name", "community_icon",
      "banner_background_image", "description_html", "created", "user_is_subscriber",
      "public_description_html", "banner_img", "banner_background_color", "id", "over18",
      "header_title", "url", "mobile_banner_image")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "display_name")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "display_name_prefixed")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "subscribers")

  private val nullableDoubleAdapter: JsonAdapter<Double?> =
      moshi.adapter(Double::class.javaObjectType, emptySet(), "created")

  private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
      moshi.adapter(Boolean::class.javaObjectType, emptySet(), "user_is_subscriber")

  public override fun toString(): String = buildString(51) {
      append("GeneratedJsonAdapter(").append("SubredditDto.SubredditDataDto").append(')') }

  public override fun fromJson(reader: JsonReader): SubredditDto.SubredditDataDto {
    var display_name: String? = null
    var header_img: String? = null
    var title: String? = null
    var icon_img: String? = null
    var display_name_prefixed: String? = null
    var subscribers: Int? = null
    var name: String? = null
    var community_icon: String? = null
    var banner_background_image: String? = null
    var description_html: String? = null
    var created: Double? = null
    var user_is_subscriber: Boolean? = null
    var public_description_html: String? = null
    var banner_img: String? = null
    var banner_background_color: String? = null
    var id: String? = null
    var over18: Boolean? = null
    var description: String? = null
    var url: String? = null
    var mobile_banner_image: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> display_name = nullableStringAdapter.fromJson(reader)
        1 -> header_img = nullableStringAdapter.fromJson(reader)
        2 -> title = nullableStringAdapter.fromJson(reader)
        3 -> icon_img = nullableStringAdapter.fromJson(reader)
        4 -> display_name_prefixed = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("display_name_prefixed", "display_name_prefixed", reader)
        5 -> subscribers = nullableIntAdapter.fromJson(reader)
        6 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        7 -> community_icon = nullableStringAdapter.fromJson(reader)
        8 -> banner_background_image = nullableStringAdapter.fromJson(reader)
        9 -> description_html = nullableStringAdapter.fromJson(reader)
        10 -> created = nullableDoubleAdapter.fromJson(reader)
        11 -> user_is_subscriber = nullableBooleanAdapter.fromJson(reader)
        12 -> public_description_html = nullableStringAdapter.fromJson(reader)
        13 -> banner_img = nullableStringAdapter.fromJson(reader)
        14 -> banner_background_color = nullableStringAdapter.fromJson(reader)
        15 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        16 -> over18 = nullableBooleanAdapter.fromJson(reader)
        17 -> description = nullableStringAdapter.fromJson(reader)
        18 -> url = nullableStringAdapter.fromJson(reader)
        19 -> mobile_banner_image = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return SubredditDto.SubredditDataDto(
        display_name = display_name,
        header_img = header_img,
        title = title,
        icon_img = icon_img,
        display_name_prefixed = display_name_prefixed ?:
            throw Util.missingProperty("display_name_prefixed", "display_name_prefixed", reader),
        subscribers = subscribers,
        name = name ?: throw Util.missingProperty("name", "name", reader),
        community_icon = community_icon,
        banner_background_image = banner_background_image,
        description_html = description_html,
        created = created,
        user_is_subscriber = user_is_subscriber,
        public_description_html = public_description_html,
        banner_img = banner_img,
        banner_background_color = banner_background_color,
        id = id ?: throw Util.missingProperty("id", "id", reader),
        over18 = over18,
        description = description,
        url = url,
        mobile_banner_image = mobile_banner_image
    )
  }

  public override fun toJson(writer: JsonWriter, value_: SubredditDto.SubredditDataDto?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("display_name")
    nullableStringAdapter.toJson(writer, value_.display_name)
    writer.name("header_img")
    nullableStringAdapter.toJson(writer, value_.header_img)
    writer.name("title")
    nullableStringAdapter.toJson(writer, value_.title)
    writer.name("icon_img")
    nullableStringAdapter.toJson(writer, value_.icon_img)
    writer.name("display_name_prefixed")
    stringAdapter.toJson(writer, value_.display_name_prefixed)
    writer.name("subscribers")
    nullableIntAdapter.toJson(writer, value_.subscribers)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("community_icon")
    nullableStringAdapter.toJson(writer, value_.community_icon)
    writer.name("banner_background_image")
    nullableStringAdapter.toJson(writer, value_.banner_background_image)
    writer.name("description_html")
    nullableStringAdapter.toJson(writer, value_.description_html)
    writer.name("created")
    nullableDoubleAdapter.toJson(writer, value_.created)
    writer.name("user_is_subscriber")
    nullableBooleanAdapter.toJson(writer, value_.user_is_subscriber)
    writer.name("public_description_html")
    nullableStringAdapter.toJson(writer, value_.public_description_html)
    writer.name("banner_img")
    nullableStringAdapter.toJson(writer, value_.banner_img)
    writer.name("banner_background_color")
    nullableStringAdapter.toJson(writer, value_.banner_background_color)
    writer.name("id")
    stringAdapter.toJson(writer, value_.id)
    writer.name("over18")
    nullableBooleanAdapter.toJson(writer, value_.over18)
    writer.name("header_title")
    nullableStringAdapter.toJson(writer, value_.description)
    writer.name("url")
    nullableStringAdapter.toJson(writer, value_.url)
    writer.name("mobile_banner_image")
    nullableStringAdapter.toJson(writer, value_.mobile_banner_image)
    writer.endObject()
  }
}
