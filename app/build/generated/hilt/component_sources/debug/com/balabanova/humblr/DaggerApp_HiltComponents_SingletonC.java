// Generated by Dagger (https://dagger.dev).
package com.balabanova.humblr;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.balabanova.humblr.data.api.ApiPost;
import com.balabanova.humblr.data.api.ApiProfile;
import com.balabanova.humblr.data.api.ApiSubreddits;
import com.balabanova.humblr.data.api.ApiToken;
import com.balabanova.humblr.data.api.interceptor.AuthTokenProvider;
import com.balabanova.humblr.data.repository.ProfileRemoteRepositoryImpl;
import com.balabanova.humblr.data.repository.SubredditsRemoteRepositoryImpl;
import com.balabanova.humblr.data.sharedprefsservice.SharedPrefsService;
import com.balabanova.humblr.di.ApiModule;
import com.balabanova.humblr.di.ApiModule_ProvideApiPostFactory;
import com.balabanova.humblr.di.ApiModule_ProvideApiProfileFactory;
import com.balabanova.humblr.di.ApiModule_ProvideApiSubredditsFactory;
import com.balabanova.humblr.di.ApiModule_ProvideApiTokenFactory;
import com.balabanova.humblr.di.ApiModule_ProvideAuthTokenInterceptorFactory;
import com.balabanova.humblr.di.ApiModule_ProvideAuthTokenProviderFactory;
import com.balabanova.humblr.di.ApiModule_ProvideLoginInterceptorFactory;
import com.balabanova.humblr.di.ApiModule_ProvideMoshiFactory;
import com.balabanova.humblr.di.ApiModule_ProvideRedditClientFactory;
import com.balabanova.humblr.di.ApiModule_ProvideRetrofitFactory;
import com.balabanova.humblr.domain.repository.ProfileRemoteRepository;
import com.balabanova.humblr.domain.repository.SubredditsRemoteRepository;
import com.balabanova.humblr.ui.MainFragment;
import com.balabanova.humblr.ui.MainViewModel;
import com.balabanova.humblr.ui.MainViewModel_HiltModules_KeyModule_ProvideFactory;
import com.balabanova.humblr.ui.authorization.AuthFragment;
import com.balabanova.humblr.ui.favourites.FavouritesFragment;
import com.balabanova.humblr.ui.favourites.FavouritesViewModel;
import com.balabanova.humblr.ui.favourites.FavouritesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.balabanova.humblr.ui.home.HomeFragment;
import com.balabanova.humblr.ui.home.HomeViewModel;
import com.balabanova.humblr.ui.home.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.balabanova.humblr.ui.home.SingleSubredditFragment;
import com.balabanova.humblr.ui.home.SingleSubredditViewModel;
import com.balabanova.humblr.ui.home.SingleSubredditViewModel_HiltModules_KeyModule_ProvideFactory;
import com.balabanova.humblr.ui.onboarding.OnboardingFragment;
import com.balabanova.humblr.ui.onboarding.OnboardingViewModel;
import com.balabanova.humblr.ui.onboarding.OnboardingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.balabanova.humblr.ui.profile.FriendsFragment;
import com.balabanova.humblr.ui.profile.FriendsViewModel;
import com.balabanova.humblr.ui.profile.FriendsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.balabanova.humblr.ui.profile.ProfileFragment;
import com.balabanova.humblr.ui.profile.ProfileViewModel;
import com.balabanova.humblr.ui.profile.ProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.balabanova.humblr.ui.user.UserFragment;
import com.balabanova.humblr.ui.user.UserViewModel;
import com.balabanova.humblr.ui.user.UserViewModel_HiltModules_KeyModule_ProvideFactory;
import com.squareup.moshi.Moshi;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerApp_HiltComponents_SingletonC {
  private DaggerApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApiModule apiModule;

    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(apiModule, applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public App_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public App_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public App_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends App_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends App_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectMainFragment(MainFragment arg0) {
    }

    @Override
    public void injectAuthFragment(AuthFragment arg0) {
    }

    @Override
    public void injectFavouritesFragment(FavouritesFragment arg0) {
    }

    @Override
    public void injectHomeFragment(HomeFragment arg0) {
    }

    @Override
    public void injectSingleSubredditFragment(SingleSubredditFragment arg0) {
    }

    @Override
    public void injectOnboardingFragment(OnboardingFragment arg0) {
    }

    @Override
    public void injectFriendsFragment(FriendsFragment arg0) {
    }

    @Override
    public void injectProfileFragment(ProfileFragment arg0) {
    }

    @Override
    public void injectUserFragment(UserFragment arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends App_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends App_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(8).add(FavouritesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(FriendsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MainViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(OnboardingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SingleSubredditViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(UserViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<FavouritesViewModel> favouritesViewModelProvider;

    private Provider<FriendsViewModel> friendsViewModelProvider;

    private Provider<HomeViewModel> homeViewModelProvider;

    private Provider<MainViewModel> mainViewModelProvider;

    private Provider<OnboardingViewModel> onboardingViewModelProvider;

    private Provider<ProfileViewModel> profileViewModelProvider;

    private Provider<SingleSubredditViewModel> singleSubredditViewModelProvider;

    private Provider<UserViewModel> userViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.favouritesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.friendsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.homeViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.mainViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.onboardingViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.profileViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.singleSubredditViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.userViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(8).put("com.balabanova.humblr.ui.favourites.FavouritesViewModel", ((Provider) favouritesViewModelProvider)).put("com.balabanova.humblr.ui.profile.FriendsViewModel", ((Provider) friendsViewModelProvider)).put("com.balabanova.humblr.ui.home.HomeViewModel", ((Provider) homeViewModelProvider)).put("com.balabanova.humblr.ui.MainViewModel", ((Provider) mainViewModelProvider)).put("com.balabanova.humblr.ui.onboarding.OnboardingViewModel", ((Provider) onboardingViewModelProvider)).put("com.balabanova.humblr.ui.profile.ProfileViewModel", ((Provider) profileViewModelProvider)).put("com.balabanova.humblr.ui.home.SingleSubredditViewModel", ((Provider) singleSubredditViewModelProvider)).put("com.balabanova.humblr.ui.user.UserViewModel", ((Provider) userViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.balabanova.humblr.ui.favourites.FavouritesViewModel 
          return (T) new FavouritesViewModel(singletonCImpl.bindSubredditsRemoteRepositoryProvider.get());

          case 1: // com.balabanova.humblr.ui.profile.FriendsViewModel 
          return (T) new FriendsViewModel(singletonCImpl.bindProfileRemoteRepositoryProvider.get());

          case 2: // com.balabanova.humblr.ui.home.HomeViewModel 
          return (T) new HomeViewModel(singletonCImpl.bindSubredditsRemoteRepositoryProvider.get(), singletonCImpl.sharedPrefsServiceProvider.get(), singletonCImpl.provideApiTokenProvider.get());

          case 3: // com.balabanova.humblr.ui.MainViewModel 
          return (T) new MainViewModel(singletonCImpl.sharedPrefsServiceProvider.get());

          case 4: // com.balabanova.humblr.ui.onboarding.OnboardingViewModel 
          return (T) new OnboardingViewModel(singletonCImpl.sharedPrefsServiceProvider.get());

          case 5: // com.balabanova.humblr.ui.profile.ProfileViewModel 
          return (T) new ProfileViewModel(singletonCImpl.bindProfileRemoteRepositoryProvider.get(), singletonCImpl.bindSubredditsRemoteRepositoryProvider.get(), singletonCImpl.sharedPrefsServiceProvider.get());

          case 6: // com.balabanova.humblr.ui.home.SingleSubredditViewModel 
          return (T) new SingleSubredditViewModel(singletonCImpl.bindSubredditsRemoteRepositoryProvider.get());

          case 7: // com.balabanova.humblr.ui.user.UserViewModel 
          return (T) new UserViewModel(singletonCImpl.bindProfileRemoteRepositoryProvider.get(), singletonCImpl.bindSubredditsRemoteRepositoryProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends App_HiltComponents.SingletonC {
    private final ApiModule apiModule;

    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<AuthTokenProvider> provideAuthTokenProvider;

    private Provider<OkHttpClient> provideRedditClientProvider;

    private Provider<Moshi> provideMoshiProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<ApiSubreddits> provideApiSubredditsProvider;

    private Provider<ApiPost> provideApiPostProvider;

    private Provider<ApiProfile> provideApiProfileProvider;

    private Provider<SubredditsRemoteRepositoryImpl> subredditsRemoteRepositoryImplProvider;

    private Provider<SubredditsRemoteRepository> bindSubredditsRemoteRepositoryProvider;

    private Provider<ProfileRemoteRepositoryImpl> profileRemoteRepositoryImplProvider;

    private Provider<ProfileRemoteRepository> bindProfileRemoteRepositoryProvider;

    private Provider<SharedPrefsService> sharedPrefsServiceProvider;

    private Provider<ApiToken> provideApiTokenProvider;

    private SingletonCImpl(ApiModule apiModuleParam,
        ApplicationContextModule applicationContextModuleParam) {
      this.apiModule = apiModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      initialize(apiModuleParam, applicationContextModuleParam);

    }

    private Interceptor authTokenInterceptorQualifierInterceptor() {
      return ApiModule_ProvideAuthTokenInterceptorFactory.provideAuthTokenInterceptor(apiModule, provideAuthTokenProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApiModule apiModuleParam,
        final ApplicationContextModule applicationContextModuleParam) {
      this.provideAuthTokenProvider = DoubleCheck.provider(new SwitchingProvider<AuthTokenProvider>(singletonCImpl, 4));
      this.provideRedditClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonCImpl, 3));
      this.provideMoshiProvider = DoubleCheck.provider(new SwitchingProvider<Moshi>(singletonCImpl, 5));
      this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 2));
      this.provideApiSubredditsProvider = DoubleCheck.provider(new SwitchingProvider<ApiSubreddits>(singletonCImpl, 1));
      this.provideApiPostProvider = DoubleCheck.provider(new SwitchingProvider<ApiPost>(singletonCImpl, 6));
      this.provideApiProfileProvider = DoubleCheck.provider(new SwitchingProvider<ApiProfile>(singletonCImpl, 7));
      this.subredditsRemoteRepositoryImplProvider = new SwitchingProvider<>(singletonCImpl, 0);
      this.bindSubredditsRemoteRepositoryProvider = DoubleCheck.provider((Provider) subredditsRemoteRepositoryImplProvider);
      this.profileRemoteRepositoryImplProvider = new SwitchingProvider<>(singletonCImpl, 8);
      this.bindProfileRemoteRepositoryProvider = DoubleCheck.provider((Provider) profileRemoteRepositoryImplProvider);
      this.sharedPrefsServiceProvider = DoubleCheck.provider(new SwitchingProvider<SharedPrefsService>(singletonCImpl, 9));
      this.provideApiTokenProvider = DoubleCheck.provider(new SwitchingProvider<ApiToken>(singletonCImpl, 10));
    }

    @Override
    public void injectApp(App arg0) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.balabanova.humblr.data.repository.SubredditsRemoteRepositoryImpl 
          return (T) new SubredditsRemoteRepositoryImpl(singletonCImpl.provideApiSubredditsProvider.get(), singletonCImpl.provideApiPostProvider.get(), singletonCImpl.provideApiProfileProvider.get());

          case 1: // com.balabanova.humblr.data.api.ApiSubreddits 
          return (T) ApiModule_ProvideApiSubredditsFactory.provideApiSubreddits(singletonCImpl.apiModule, singletonCImpl.provideRetrofitProvider.get());

          case 2: // retrofit2.Retrofit 
          return (T) ApiModule_ProvideRetrofitFactory.provideRetrofit(singletonCImpl.apiModule, singletonCImpl.provideRedditClientProvider.get(), singletonCImpl.provideMoshiProvider.get());

          case 3: // okhttp3.OkHttpClient 
          return (T) ApiModule_ProvideRedditClientFactory.provideRedditClient(singletonCImpl.apiModule, ApiModule_ProvideLoginInterceptorFactory.provideLoginInterceptor(singletonCImpl.apiModule), singletonCImpl.authTokenInterceptorQualifierInterceptor());

          case 4: // com.balabanova.humblr.data.api.interceptor.AuthTokenProvider 
          return (T) ApiModule_ProvideAuthTokenProviderFactory.provideAuthTokenProvider(singletonCImpl.apiModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 5: // com.squareup.moshi.Moshi 
          return (T) ApiModule_ProvideMoshiFactory.provideMoshi(singletonCImpl.apiModule);

          case 6: // com.balabanova.humblr.data.api.ApiPost 
          return (T) ApiModule_ProvideApiPostFactory.provideApiPost(singletonCImpl.apiModule, singletonCImpl.provideRetrofitProvider.get());

          case 7: // com.balabanova.humblr.data.api.ApiProfile 
          return (T) ApiModule_ProvideApiProfileFactory.provideApiProfile(singletonCImpl.apiModule, singletonCImpl.provideRetrofitProvider.get());

          case 8: // com.balabanova.humblr.data.repository.ProfileRemoteRepositoryImpl 
          return (T) new ProfileRemoteRepositoryImpl(singletonCImpl.provideApiProfileProvider.get());

          case 9: // com.balabanova.humblr.data.sharedprefsservice.SharedPrefsService 
          return (T) new SharedPrefsService(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 10: // com.balabanova.humblr.data.api.ApiToken 
          return (T) ApiModule_ProvideApiTokenFactory.provideApiToken(singletonCImpl.apiModule, singletonCImpl.provideRetrofitProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
