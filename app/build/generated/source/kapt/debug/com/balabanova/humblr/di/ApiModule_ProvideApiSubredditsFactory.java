// Generated by Dagger (https://dagger.dev).
package com.balabanova.humblr.di;

import com.balabanova.humblr.data.api.ApiSubreddits;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ApiModule_ProvideApiSubredditsFactory implements Factory<ApiSubreddits> {
  private final ApiModule module;

  private final Provider<Retrofit> retrofitProvider;

  public ApiModule_ProvideApiSubredditsFactory(ApiModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public ApiSubreddits get() {
    return provideApiSubreddits(module, retrofitProvider.get());
  }

  public static ApiModule_ProvideApiSubredditsFactory create(ApiModule module,
      Provider<Retrofit> retrofitProvider) {
    return new ApiModule_ProvideApiSubredditsFactory(module, retrofitProvider);
  }

  public static ApiSubreddits provideApiSubreddits(ApiModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideApiSubreddits(retrofit));
  }
}
